name: CMake

on:
  push:
  #   paths-ignore:
  #     - '**/*.md'
  # pull_request:
  #   paths-ignore:
  #     - '**/*.md'
  workflow_dispatch:

concurrency:
  group: ${{ github.ref }}-${{ github.event_name }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:

    - name: Setup environment
      run: |
        echo "PS5SDK=${{ github.workspace }}/ps5sdk" >> $GITHUB_ENV
        sudo apt install ninja-build

    - name: Show Clang version
      run: clang -v

    - name: Checkout
      uses: actions/checkout@main
      with:
        submodules: recursive
        fetch-depth: 0

    # - name: Checkout PS5SDK
    #   uses: actions/checkout@main
    #   with:
    #     repository: illusion0001/PS5SDK
    #     ref: nand-clang-16
    #     path: ${{ env.PS5SDK }}

    - name: Checkout private repository
      uses: actions/checkout@v4
      with:
        repository: MrBigGiantHeat/SDK
        ref: test  # or whatever branch/tag you want
        token: ${{ secrets.REPO }}
        path: ${{ env.PS5SDK }}  # optional, where to place the repo

    - name: Set commit version
      run: |
        echo "commit_ver=1.$(git rev-list HEAD --count)" >> $GITHUB_ENV
        echo "commit_hash=$(echo ${GITHUB_SHA} | cut -c1-8)" >> $GITHUB_ENV

    - name: Build SDK
      working-directory: ${{ env.PS5SDK }}
      run: bash ./build.sh

    - name: Build stubs
      if: false
      working-directory: stubber
      run: |
        curl -sL https://github.com/illusion0001/libhijacker/releases/download/stubber-lib/lib1.tar.gz | tar xz -C ./
        cd PS5_Root
        mkdir build
        cd build
        cmake -G Ninja -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ ..
        ninja
        cp -rv ${{ github.workspace }}/stubber/PS5_Root/build/system/common/lib/ ${{ github.workspace }}

    - name: Install stubs
      run: curl -sL https://github.com/illusion0001/libhijacker/releases/download/stubber-lib/lib2.tar.gz | tar xz -C ./

    - name: Build elf
      run: bash ./build.sh

    - name: Upload artifacts
    # if: github.event_name != 'workflow_dispatch'
      # if: false
      uses: actions/upload-artifact@main
      with:
        name: libhijacker_${{ env.commit_ver }}-${{ env.commit_hash }}
        path: |
          bin/spawner.elf
          README.md

    # - name: Create Release
    #   if: github.event_name == 'workflow_dispatch'
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   run: |
    #     zip libhijacker_${{ env.commit_ver }}-${{ env.commit_hash }}.zip bin/spawner.elf README.md
    #     gh release create ${{ env.commit_ver }}-${{ env.commit_hash }} libhijacker_${{ env.commit_ver }}-${{ env.commit_hash }}.zip --target ${{ GITHUB.SHA }} -t "${{ env.commit_ver }}" -F README.md
